---
import DB from "@utils/db.js";
import type { Spotify } from "@utils/spotify.js";

const { user } = Astro.locals;

if (!user) return Astro.redirect("/401");

interface Props {
    track: Spotify.Track;
}

const { track } = Astro.props;

const groupId = Astro.params.group_id;
const playlistId = Astro.params.playlist_id;

if (!groupId || !playlistId) return Astro.redirect("/401");

const image = track.album.images[1].url;

const sql =
    "SELECT * FROM `song_ratings` WHERE `song_id` = ? AND `group_id` = ? AND `playlist_id` = ?";
const args = [track.id, groupId, playlistId];

async function getRatings() {
    const result = await DB.execute({ sql, args });

    if (result.rows.length === 0) return [];

    return result.rows
        .map((row) => {
            if (typeof row.rating !== "number") return null;

            return {
                user_id: row.user_id,
                rating: row.rating,
            };
        })
        .filter(Boolean);
}

const ratings = await getRatings();

const myRating = ratings.find((rating) => rating?.user_id === user.id);
const averageRating =
    ratings.length > 0
        ? ratings.reduce((acc, rating) => acc + (rating?.rating || 0), 0) /
            ratings.length
        : "No ratings";
---

<div class="w-fit h-full">
    <div class="p-2 flex flex-col gap-2 h-full">
        <a class="flex gap-2 relative" href={track.external_urls.spotify} target="_blank">
            {
            image && (
                <img
                    src={image}
                    class="object-cover w-full aspect-square brightness-75"
                />
            )
            }
            <div class="absolute bottom-0 m-4 z-10">
                <h5 class="mb-2 text-xl font-bold tracking-tight">
                    {track.name}
                </h5>
                <p class="text-sm font-medium text-gray-300">
                    {
                    track.artists.map((artist, index) => (
                        <span class="inline-block mr-2">
                            {artist.name}
                            {++index < track.artists.length && ","}
                        </span>
                    ))
                    }
                </p>
            </div>
        </a>
        <div>
            <p>Average: {averageRating}</p>
            <div>
                <form
                    action="/api/song/rating/set"
                    method="post"
                    class="flex gap-2 w-full"
                >
                    <input type="hidden" name="song_id" value={track.id} />
                    <input type="hidden" name="group_id" value={groupId} />
                    <input
                        type="hidden"
                        name="playlist_id"
                        value={playlistId}
                    />
                    <input
                        type="number"
                        class="w-full px-2 bg-gray-700 rounded"
                        name="rating"
                        min="1"
                        max="10"
                        value={myRating?.rating || "0"}
                        }
                    />
                    {
                    !Boolean(myRating) && (
                        <button
                            type="submit"
                            class="px-4 py-2 bg-green-500 rounded"
                        >
                            RATE
                        </button>
                    )
                    }
                    {
                    Boolean(myRating) && (
                        <button
                            type="submit"
                            class="px-4 py-2 bg-yellow-500 rounded"
                        >
                            EDIT
                        </button>
                    )
                    }
                </form>
            </div>
        </div>
    </div>
</div>
